// @ts-nocheck
/**
 * This file is generated by 'file2variable-cli'
 * It is not mean to be edited by hand
 */
import { createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, createVNode as _createVNode, Fragment as _Fragment, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle, openBlock as _openBlock, renderList as _renderList, resolveComponent as _resolveComponent, toDisplayString as _toDisplayString } from 'vue'
// tslint:disable
/* eslint-disable */

export function anyEditorTemplateHtml(_ctx, _cache) {
  const _component_optional = _resolveComponent("optional")
  const _component_icon = _resolveComponent("icon")
  const _component_description = _resolveComponent("description")

  return (_openBlock(), _createElementBlock("div", {
    class: _normalizeClass(_ctx.className)
  }, [
    _createElementVNode("label", {
      class: _normalizeClass(_ctx.theme.title)
    }, [
      _createTextVNode(_toDisplayString(_ctx.titleToShow) + " ", 1 /* TEXT */),
      _createElementVNode("div", {
        class: _normalizeClass(_ctx.theme.buttonGroup),
        style: _normalizeStyle(_ctx.buttonGroupStyle)
      }, [
        _createVNode(_component_optional, {
          required: _ctx.required,
          value: _ctx.value,
          isReadOnly: _ctx.isReadOnly,
          theme: _ctx.theme,
          locale: _ctx.locale,
          onToggleOptional: _cache[0] || (_cache[0] = $event => (_ctx.toggleOptional()))
        }, null, 8 /* PROPS */, ["required", "value", "isReadOnly", "theme", "locale"]),
        (_ctx.hasDeleteButtonFunction)
          ? (_openBlock(), _createBlock(_component_icon, {
              key: 0,
              onClick: _cache[1] || (_cache[1] = $event => (_ctx.$emit('delete'))),
              text: _ctx.icon.delete,
              theme: _ctx.theme,
              icon: _ctx.icon
            }, null, 8 /* PROPS */, ["text", "theme", "icon"]))
          : _createCommentVNode("v-if", true)
      ], 6 /* CLASS, STYLE */)
    ], 2 /* CLASS */),
    (_ctx.monacoEditor)
      ? (_openBlock(), _createElementBlock("div", {
          key: 0,
          ref: "monacoEditor",
          style: { height: '400px', width: '90%' }
        }, null, 512 /* NEED_PATCH */))
      : _createCommentVNode("v-if", true),
    _createVNode(_component_description, {
      theme: _ctx.theme,
      message: _ctx.schema.description
    }, null, 8 /* PROPS */, ["theme", "message"])
  ], 2 /* CLASS */))
}
export function arrayEditorTemplateHtml(_ctx, _cache) {
  const _component_optional = _resolveComponent("optional")
  const _component_icon = _resolveComponent("icon")
  const _component_description = _resolveComponent("description")
  const _component_select2 = _resolveComponent("select2")
  const _component_editor = _resolveComponent("editor")

  return (_openBlock(), _createElementBlock("div", {
    class: _normalizeClass(_ctx.className)
  }, [
    _createElementVNode("h3", null, [
      _createTextVNode(_toDisplayString(_ctx.titleToShow) + " ", 1 /* TEXT */),
      _createElementVNode("div", {
        class: _normalizeClass(_ctx.theme.buttonGroup),
        style: _normalizeStyle(_ctx.buttonGroupStyleString)
      }, [
        _createVNode(_component_optional, {
          required: _ctx.required,
          value: _ctx.value,
          isReadOnly: _ctx.isReadOnly,
          theme: _ctx.theme,
          locale: _ctx.locale,
          onToggleOptional: _cache[0] || (_cache[0] = $event => (_ctx.toggleOptional()))
        }, null, 8 /* PROPS */, ["required", "value", "isReadOnly", "theme", "locale"]),
        (!_ctx.disableCollapse && _ctx.value && _ctx.value.length > 0 && !_ctx.schema.enum)
          ? (_openBlock(), _createBlock(_component_icon, {
              key: 0,
              onClick: _cache[1] || (_cache[1] = $event => (_ctx.collapseOrExpand())),
              text: _ctx.collapsed ? _ctx.icon.expand : _ctx.icon.collapse,
              theme: _ctx.theme,
              icon: _ctx.icon
            }, null, 8 /* PROPS */, ["text", "theme", "icon"]))
          : _createCommentVNode("v-if", true),
        (_ctx.hasAddButton)
          ? (_openBlock(), _createBlock(_component_icon, {
              key: 1,
              onClick: _cache[2] || (_cache[2] = $event => (_ctx.addItem())),
              text: _ctx.icon.add,
              theme: _ctx.theme,
              icon: _ctx.icon
            }, null, 8 /* PROPS */, ["text", "theme", "icon"]))
          : _createCommentVNode("v-if", true),
        (_ctx.hasDeleteButtonFunction)
          ? (_openBlock(), _createBlock(_component_icon, {
              key: 2,
              onClick: _cache[3] || (_cache[3] = $event => (_ctx.$emit('delete'))),
              text: _ctx.icon.delete,
              theme: _ctx.theme,
              icon: _ctx.icon
            }, null, 8 /* PROPS */, ["text", "theme", "icon"]))
          : _createCommentVNode("v-if", true)
      ], 6 /* CLASS, STYLE */)
    ]),
    _createVNode(_component_description, {
      theme: _ctx.theme,
      message: _ctx.schema.description
    }, null, 8 /* PROPS */, ["theme", "message"]),
    (_ctx.schema.enum)
      ? (_openBlock(), _createElementBlock("div", { key: 0 }, [
          (_ctx.schema.format === 'select2' && !_ctx.noSelect2)
            ? (_openBlock(), _createBlock(_component_select2, {
                key: 0,
                data: _ctx.options,
                value: _ctx.value,
                disabled: _ctx.isReadOnly,
                multiple: true,
                onUpdate: _cache[4] || (_cache[4] = $event => (_ctx.onChangeSelect2($event)))
              }, null, 8 /* PROPS */, ["data", "value", "disabled"]))
            : (_openBlock(true), _createElementBlock(_Fragment, { key: 1 }, _renderList(_ctx.options, (option) => {
                return (_openBlock(), _createElementBlock("span", {
                  key: option.value,
                  class: _normalizeClass(_ctx.theme.checkbox)
                }, [
                  _createElementVNode("label", null, [
                    _createElementVNode("input", {
                      type: "checkbox",
                      onChange: $event => (_ctx.onChangeCheckbox(option.value)),
                      checked: _ctx.isChecked(option.value),
                      disabled: _ctx.isReadOnly
                    }, null, 40 /* PROPS, HYDRATE_EVENTS */, ["onChange", "checked", "disabled"]),
                    _createTextVNode(" " + _toDisplayString(option.label), 1 /* TEXT */)
                  ])
                ], 2 /* CLASS */))
              }), 128 /* KEYED_FRAGMENT */))
        ]))
      : (_openBlock(), _createElementBlock("div", {
          key: 1,
          class: _normalizeClass(_ctx.theme.card)
        }, [
          (_ctx.showFilter)
            ? (_openBlock(), _createElementBlock("div", {
                key: 0,
                class: _normalizeClass(_ctx.theme.row)
              }, [
                _createElementVNode("input", {
                  class: _normalizeClass(_ctx.theme.input),
                  onChange: _cache[5] || (_cache[5] = $event => (_ctx.onFilterChange($event))),
                  onKeyup: _cache[6] || (_cache[6] = $event => (_ctx.onFilterChange($event))),
                  value: _ctx.filter
                }, null, 42 /* CLASS, PROPS, HYDRATE_EVENTS */, ["value"])
              ], 2 /* CLASS */))
            : _createCommentVNode("v-if", true),
          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.filteredValues, (item) => {
            return (_openBlock(), _createElementBlock("div", {
              key: (1 + item.i) * _ctx.renderSwitch,
              "data-index": item.i,
              class: _normalizeClass(_ctx.theme.rowContainer)
            }, [
              _createVNode(_component_editor, {
                schema: _ctx.schema.items,
                title: item.i,
                getReference: _ctx.getReference,
                "initial-value": _ctx.value[item.i],
                onUpdateValue: $event => (_ctx.onChange(item.i, $event)),
                theme: _ctx.theme,
                icon: _ctx.icon,
                locale: _ctx.locale,
                required: true,
                readonly: _ctx.isReadOnly,
                onDelete: $event => (_ctx.onDeleteFunction(item.i)),
                "has-delete-button": true,
                dragula: _ctx.dragula,
                md: _ctx.md,
                hljs: _ctx.hljs,
                "force-https": _ctx.forceHttps,
                "disable-collapse": _ctx.disableCollapse,
                minItemCountIfNeedFilter: _ctx.minItemCountIfNeedFilter,
                "no-select2": _ctx.noSelect2,
                "monaco-editor": _ctx.monacoEditor
              }, null, 8 /* PROPS */, ["schema", "title", "getReference", "initial-value", "onUpdateValue", "theme", "icon", "locale", "readonly", "onDelete", "dragula", "md", "hljs", "force-https", "disable-collapse", "minItemCountIfNeedFilter", "no-select2", "monaco-editor"])
            ], 10 /* CLASS, PROPS */, ["data-index"]))
          }), 128 /* KEYED_FRAGMENT */))
        ], 2 /* CLASS */)),
    _createVNode(_component_description, {
      theme: _ctx.theme,
      message: _ctx.errorMessage
    }, null, 8 /* PROPS */, ["theme", "message"])
  ], 2 /* CLASS */))
}
export function booleanEditorTemplateHtml(_ctx, _cache) {
  const _component_optional = _resolveComponent("optional")
  const _component_icon = _resolveComponent("icon")
  const _component_select2 = _resolveComponent("select2")
  const _component_description = _resolveComponent("description")

  return (_openBlock(), _createElementBlock("div", {
    class: _normalizeClass(_ctx.className)
  }, [
    _createElementVNode("label", {
      class: _normalizeClass(_ctx.theme.title)
    }, [
      _createTextVNode(_toDisplayString(_ctx.titleToShow) + " ", 1 /* TEXT */),
      _createElementVNode("div", {
        class: _normalizeClass(_ctx.theme.buttonGroup),
        style: _normalizeStyle(_ctx.buttonGroupStyle)
      }, [
        _createVNode(_component_optional, {
          required: _ctx.required,
          value: _ctx.value,
          isReadOnly: _ctx.isReadOnly,
          theme: _ctx.theme,
          locale: _ctx.locale,
          onToggleOptional: _cache[0] || (_cache[0] = $event => (_ctx.toggleOptional()))
        }, null, 8 /* PROPS */, ["required", "value", "isReadOnly", "theme", "locale"]),
        (_ctx.hasDeleteButtonFunction)
          ? (_openBlock(), _createBlock(_component_icon, {
              key: 0,
              onClick: _cache[1] || (_cache[1] = $event => (_ctx.$emit('delete'))),
              text: _ctx.icon.delete,
              theme: _ctx.theme,
              icon: _ctx.icon
            }, null, 8 /* PROPS */, ["text", "theme", "icon"]))
          : _createCommentVNode("v-if", true)
      ], 6 /* CLASS, STYLE */)
    ], 2 /* CLASS */),
    (_ctx.value !== undefined)
      ? (_openBlock(), _createElementBlock("div", { key: 0 }, [
          (_ctx.schema.format === 'checkbox')
            ? (_openBlock(), _createElementBlock("span", {
                key: 0,
                class: _normalizeClass(_ctx.theme.checkbox)
              }, [
                _createElementVNode("label", null, [
                  _createElementVNode("input", {
                    type: "checkbox",
                    onChange: _cache[2] || (_cache[2] = $event => (_ctx.onChange())),
                    checked: _ctx.value,
                    disabled: _ctx.isReadOnly
                  }, null, 40 /* PROPS, HYDRATE_EVENTS */, ["checked", "disabled"]),
                  _createTextVNode(" " + _toDisplayString(_ctx.locale.info.true), 1 /* TEXT */)
                ])
              ], 2 /* CLASS */))
            : (_ctx.schema.format === 'select')
              ? (_openBlock(), _createElementBlock("select", {
                  key: 1,
                  class: _normalizeClass(_ctx.theme.select),
                  value: _ctx.value,
                  disabled: _ctx.isReadOnly,
                  onChange: _cache[3] || (_cache[3] = $event => (_ctx.onChange()))
                }, [
                  _createElementVNode("option", { value: true }, _toDisplayString(_ctx.locale.info.true), 1 /* TEXT */),
                  _createElementVNode("option", { value: false }, _toDisplayString(_ctx.locale.info.false), 1 /* TEXT */)
                ], 42 /* CLASS, PROPS, HYDRATE_EVENTS */, ["value", "disabled"]))
              : (_ctx.schema.format === 'select2')
                ? (_openBlock(), _createBlock(_component_select2, {
                    key: 2,
                    data: _ctx.booleanOptions,
                    value: _ctx.value,
                    disabled: _ctx.isReadOnly,
                    onUpdate: _cache[4] || (_cache[4] = $event => (_ctx.onChange()))
                  }, null, 8 /* PROPS */, ["data", "value", "disabled"]))
                : (_openBlock(), _createElementBlock(_Fragment, { key: 3 }, [
                    _createElementVNode("span", {
                      class: _normalizeClass(_ctx.theme.radiobox)
                    }, [
                      _createElementVNode("label", null, [
                        _createElementVNode("input", {
                          type: "radio",
                          onChange: _cache[5] || (_cache[5] = $event => (_ctx.onChange())),
                          checked: _ctx.value,
                          disabled: _ctx.isReadOnly
                        }, null, 40 /* PROPS, HYDRATE_EVENTS */, ["checked", "disabled"]),
                        _createTextVNode(" " + _toDisplayString(_ctx.locale.info.true), 1 /* TEXT */)
                      ])
                    ], 2 /* CLASS */),
                    _createElementVNode("span", {
                      class: _normalizeClass(_ctx.theme.radiobox)
                    }, [
                      _createElementVNode("label", null, [
                        _createElementVNode("input", {
                          type: "radio",
                          onChange: _cache[6] || (_cache[6] = $event => (_ctx.onChange())),
                          checked: !_ctx.value,
                          disabled: _ctx.isReadOnly
                        }, null, 40 /* PROPS, HYDRATE_EVENTS */, ["checked", "disabled"]),
                        _createTextVNode(" " + _toDisplayString(_ctx.locale.info.false), 1 /* TEXT */)
                      ])
                    ], 2 /* CLASS */)
                  ], 64 /* STABLE_FRAGMENT */))
        ]))
      : _createCommentVNode("v-if", true),
    _createVNode(_component_description, {
      theme: _ctx.theme,
      message: _ctx.schema.description
    }, null, 8 /* PROPS */, ["theme", "message"])
  ], 2 /* CLASS */))
}
export function descriptionTemplateHtml(_ctx, _cache) {
  return (_ctx.message)
    ? (_openBlock(), _createElementBlock("p", {
        key: 0,
        class: _normalizeClass(_ctx.theme.description)
      }, _toDisplayString(_ctx.message), 3 /* TEXT, CLASS */))
    : _createCommentVNode("v-if", true)
}
export function editorTemplateHtml(_ctx, _cache) {
  const _component_object_editor = _resolveComponent("object-editor")
  const _component_array_editor = _resolveComponent("array-editor")
  const _component_number_editor = _resolveComponent("number-editor")
  const _component_boolean_editor = _resolveComponent("boolean-editor")
  const _component_null_editor = _resolveComponent("null-editor")
  const _component_string_editor = _resolveComponent("string-editor")
  const _component_any_editor = _resolveComponent("any-editor")

  return (_ctx.realSchema.type === 'object')
    ? (_openBlock(), _createBlock(_component_object_editor, {
        key: 0,
        schema: _ctx.realSchema,
        "initial-value": _ctx.initialValue,
        title: _ctx.title,
        getReference: _ctx.getReference,
        theme: _ctx.theme,
        locale: _ctx.locale,
        icon: _ctx.icon,
        readonly: _ctx.readonly,
        required: _ctx.required,
        onUpdateValue: _cache[0] || (_cache[0] = $event => (_ctx.$emit('update-value', $event))),
        onDelete: _cache[1] || (_cache[1] = $event => (_ctx.$emit('delete'))),
        "has-delete-button": _ctx.hasDeleteButton,
        dragula: _ctx.dragula,
        md: _ctx.md,
        hljs: _ctx.hljs,
        forceHttps: _ctx.forceHttps,
        disableCollapse: _ctx.disableCollapse,
        noSelect2: _ctx.noSelect2,
        minItemCountIfNeedFilter: _ctx.minItemCountIfNeedFilter,
        monacoEditor: _ctx.monacoEditor
      }, null, 8 /* PROPS */, ["schema", "initial-value", "title", "getReference", "theme", "locale", "icon", "readonly", "required", "has-delete-button", "dragula", "md", "hljs", "forceHttps", "disableCollapse", "noSelect2", "minItemCountIfNeedFilter", "monacoEditor"]))
    : (_ctx.realSchema.type === 'array')
      ? (_openBlock(), _createBlock(_component_array_editor, {
          key: 1,
          schema: _ctx.realSchema,
          "initial-value": _ctx.initialValue,
          title: _ctx.title,
          getReference: _ctx.getReference,
          theme: _ctx.theme,
          locale: _ctx.locale,
          icon: _ctx.icon,
          readonly: _ctx.readonly,
          required: _ctx.required,
          onUpdateValue: _cache[2] || (_cache[2] = $event => (_ctx.$emit('update-value', $event))),
          onDelete: _cache[3] || (_cache[3] = $event => (_ctx.$emit('delete'))),
          "has-delete-button": _ctx.hasDeleteButton,
          dragula: _ctx.dragula,
          md: _ctx.md,
          hljs: _ctx.hljs,
          forceHttps: _ctx.forceHttps,
          disableCollapse: _ctx.disableCollapse,
          noSelect2: _ctx.noSelect2,
          minItemCountIfNeedFilter: _ctx.minItemCountIfNeedFilter,
          monacoEditor: _ctx.monacoEditor
        }, null, 8 /* PROPS */, ["schema", "initial-value", "title", "getReference", "theme", "locale", "icon", "readonly", "required", "has-delete-button", "dragula", "md", "hljs", "forceHttps", "disableCollapse", "noSelect2", "minItemCountIfNeedFilter", "monacoEditor"]))
      : (_ctx.realSchema.type === 'number' || _ctx.realSchema.type === 'integer')
        ? (_openBlock(), _createBlock(_component_number_editor, {
            key: 2,
            schema: _ctx.realSchema,
            "initial-value": _ctx.initialValue,
            title: _ctx.title,
            theme: _ctx.theme,
            locale: _ctx.locale,
            icon: _ctx.icon,
            readonly: _ctx.readonly,
            required: _ctx.required,
            onUpdateValue: _cache[4] || (_cache[4] = $event => (_ctx.$emit('update-value', $event))),
            onDelete: _cache[5] || (_cache[5] = $event => (_ctx.$emit('delete'))),
            "has-delete-button": _ctx.hasDeleteButton,
            noSelect2: _ctx.noSelect2
          }, null, 8 /* PROPS */, ["schema", "initial-value", "title", "theme", "locale", "icon", "readonly", "required", "has-delete-button", "noSelect2"]))
        : (_ctx.realSchema.type === 'boolean')
          ? (_openBlock(), _createBlock(_component_boolean_editor, {
              key: 3,
              schema: _ctx.realSchema,
              "initial-value": _ctx.initialValue,
              title: _ctx.title,
              theme: _ctx.theme,
              locale: _ctx.locale,
              icon: _ctx.icon,
              readonly: _ctx.readonly,
              required: _ctx.required,
              onUpdateValue: _cache[6] || (_cache[6] = $event => (_ctx.$emit('update-value', $event))),
              onDelete: _cache[7] || (_cache[7] = $event => (_ctx.$emit('delete'))),
              "has-delete-button": _ctx.hasDeleteButton
            }, null, 8 /* PROPS */, ["schema", "initial-value", "title", "theme", "locale", "icon", "readonly", "required", "has-delete-button"]))
          : (_ctx.realSchema.type === 'null')
            ? (_openBlock(), _createBlock(_component_null_editor, {
                key: 4,
                schema: _ctx.realSchema,
                "initial-value": _ctx.initialValue,
                title: _ctx.title,
                theme: _ctx.theme,
                locale: _ctx.locale,
                icon: _ctx.icon,
                readonly: _ctx.readonly,
                required: _ctx.required,
                onUpdateValue: _cache[8] || (_cache[8] = $event => (_ctx.$emit('update-value', $event))),
                onDelete: _cache[9] || (_cache[9] = $event => (_ctx.$emit('delete'))),
                "has-delete-button": _ctx.hasDeleteButton
              }, null, 8 /* PROPS */, ["schema", "initial-value", "title", "theme", "locale", "icon", "readonly", "required", "has-delete-button"]))
            : (_ctx.realSchema.type === 'string')
              ? (_openBlock(), _createBlock(_component_string_editor, {
                  key: 5,
                  schema: _ctx.realSchema,
                  "initial-value": _ctx.initialValue,
                  title: _ctx.title,
                  theme: _ctx.theme,
                  locale: _ctx.locale,
                  icon: _ctx.icon,
                  readonly: _ctx.readonly,
                  required: _ctx.required,
                  onUpdateValue: _cache[10] || (_cache[10] = $event => (_ctx.$emit('update-value', $event))),
                  onDelete: _cache[11] || (_cache[11] = $event => (_ctx.$emit('delete'))),
                  "has-delete-button": _ctx.hasDeleteButton,
                  dragula: _ctx.dragula,
                  md: _ctx.md,
                  hljs: _ctx.hljs,
                  forceHttps: _ctx.forceHttps,
                  noSelect2: _ctx.noSelect2,
                  monacoEditor: _ctx.monacoEditor
                }, null, 8 /* PROPS */, ["schema", "initial-value", "title", "theme", "locale", "icon", "readonly", "required", "has-delete-button", "dragula", "md", "hljs", "forceHttps", "noSelect2", "monacoEditor"]))
              : (_ctx.realSchema.type === undefined)
                ? (_openBlock(), _createBlock(_component_any_editor, {
                    key: 6,
                    schema: _ctx.realSchema,
                    "initial-value": _ctx.initialValue,
                    title: _ctx.title,
                    theme: _ctx.theme,
                    locale: _ctx.locale,
                    icon: _ctx.icon,
                    readonly: _ctx.readonly,
                    required: _ctx.required,
                    onUpdateValue: _cache[12] || (_cache[12] = $event => (_ctx.$emit('update-value', $event))),
                    onDelete: _cache[13] || (_cache[13] = $event => (_ctx.$emit('delete'))),
                    "has-delete-button": _ctx.hasDeleteButton,
                    monacoEditor: _ctx.monacoEditor
                  }, null, 8 /* PROPS */, ["schema", "initial-value", "title", "theme", "locale", "icon", "readonly", "required", "has-delete-button", "monacoEditor"]))
                : _createCommentVNode("v-if", true)
}
export function iconTemplateHtml(_ctx, _cache) {
  return (_openBlock(), _createElementBlock("button", {
    class: _normalizeClass(_ctx.theme.button)
  }, [
    (_ctx.icon.isText)
      ? (_openBlock(), _createElementBlock("span", { key: 0 }, _toDisplayString(_ctx.text), 1 /* TEXT */))
      : (_openBlock(), _createElementBlock("i", {
          key: 1,
          class: _normalizeClass(_ctx.text)
        }, null, 2 /* CLASS */))
  ], 2 /* CLASS */))
}
export function indexTemplateHtml(_ctx, _cache) {
  const _component_editor = _resolveComponent("editor")

  return (_openBlock(), _createBlock(_component_editor, {
    schema: _ctx.schema,
    "initial-value": _ctx.initialValue,
    getReference: _ctx.getReference,
    theme: _ctx.themeObject,
    locale: _ctx.localeObject,
    icon: _ctx.iconObject,
    readonly: _ctx.readonly,
    required: true,
    onUpdateValue: _cache[0] || (_cache[0] = $event => (_ctx.updateValue($event))),
    dragula: _ctx.dragula,
    md: _ctx.md,
    hljs: _ctx.hljs,
    forceHttps: _ctx.forceHttps,
    disableCollapse: _ctx.disableCollapse,
    noSelect2: _ctx.noSelect2,
    minItemCountIfNeedFilter: _ctx.minItemCountIfNeedFilter,
    monacoEditor: _ctx.monacoEditor
  }, null, 8 /* PROPS */, ["schema", "initial-value", "getReference", "theme", "locale", "icon", "readonly", "dragula", "md", "hljs", "forceHttps", "disableCollapse", "noSelect2", "minItemCountIfNeedFilter", "monacoEditor"]))
}
export function nullEditorTemplateHtml(_ctx, _cache) {
  const _component_optional = _resolveComponent("optional")
  const _component_icon = _resolveComponent("icon")
  const _component_description = _resolveComponent("description")

  return (_openBlock(), _createElementBlock("div", {
    class: _normalizeClass(_ctx.theme.row)
  }, [
    _createElementVNode("label", {
      class: _normalizeClass(_ctx.theme.title)
    }, [
      _createTextVNode(_toDisplayString(_ctx.titleToShow) + " ", 1 /* TEXT */),
      _createElementVNode("div", {
        class: _normalizeClass(_ctx.theme.buttonGroup),
        style: _normalizeStyle(_ctx.buttonGroupStyle)
      }, [
        _createVNode(_component_optional, {
          required: _ctx.required,
          value: _ctx.value,
          isReadOnly: _ctx.isReadOnly,
          theme: _ctx.theme,
          locale: _ctx.locale,
          onToggleOptional: _cache[0] || (_cache[0] = $event => (_ctx.toggleOptional()))
        }, null, 8 /* PROPS */, ["required", "value", "isReadOnly", "theme", "locale"]),
        (_ctx.hasDeleteButtonFunction)
          ? (_openBlock(), _createBlock(_component_icon, {
              key: 0,
              onClick: _cache[1] || (_cache[1] = $event => (_ctx.$emit('delete'))),
              text: _ctx.icon.delete,
              theme: _ctx.theme,
              icon: _ctx.icon
            }, null, 8 /* PROPS */, ["text", "theme", "icon"]))
          : _createCommentVNode("v-if", true)
      ], 6 /* CLASS, STYLE */)
    ], 2 /* CLASS */),
    _createVNode(_component_description, {
      theme: _ctx.theme,
      message: _ctx.schema.description
    }, null, 8 /* PROPS */, ["theme", "message"])
  ], 2 /* CLASS */))
}
export function numberEditorTemplateHtml(_ctx, _cache) {
  const _component_optional = _resolveComponent("optional")
  const _component_icon = _resolveComponent("icon")
  const _component_select2 = _resolveComponent("select2")
  const _component_description = _resolveComponent("description")

  return (_openBlock(), _createElementBlock("div", {
    class: _normalizeClass(_ctx.className)
  }, [
    _createElementVNode("label", {
      class: _normalizeClass(_ctx.theme.title)
    }, [
      _createTextVNode(_toDisplayString(_ctx.titleToShow) + " ", 1 /* TEXT */),
      _createElementVNode("div", {
        class: _normalizeClass(_ctx.theme.buttonGroup),
        style: _normalizeStyle(_ctx.buttonGroupStyle)
      }, [
        _createVNode(_component_optional, {
          required: _ctx.required,
          value: _ctx.value,
          isReadOnly: _ctx.isReadOnly,
          theme: _ctx.theme,
          locale: _ctx.locale,
          onToggleOptional: _cache[0] || (_cache[0] = $event => (_ctx.toggleOptional()))
        }, null, 8 /* PROPS */, ["required", "value", "isReadOnly", "theme", "locale"]),
        (_ctx.hasDeleteButtonFunction)
          ? (_openBlock(), _createBlock(_component_icon, {
              key: 0,
              onClick: _cache[1] || (_cache[1] = $event => (_ctx.$emit('delete'))),
              text: _ctx.icon.delete,
              theme: _ctx.theme,
              icon: _ctx.icon
            }, null, 8 /* PROPS */, ["text", "theme", "icon"]))
          : _createCommentVNode("v-if", true)
      ], 6 /* CLASS, STYLE */)
    ], 2 /* CLASS */),
    (_ctx.useInput)
      ? (_openBlock(), _createElementBlock("input", {
          key: 0,
          class: _normalizeClass(_ctx.errorMessage ? _ctx.theme.errorInput : _ctx.theme.input),
          type: "number",
          onChange: _cache[2] || (_cache[2] = $event => (_ctx.onChange($event))),
          onKeyup: _cache[3] || (_cache[3] = $event => (_ctx.onChange($event))),
          value: _ctx.value,
          readOnly: _ctx.isReadOnly,
          step: _ctx.step,
          disabled: _ctx.isReadOnly
        }, null, 42 /* CLASS, PROPS, HYDRATE_EVENTS */, ["value", "readOnly", "step", "disabled"]))
      : _createCommentVNode("v-if", true),
    (_ctx.useSelect2Component)
      ? (_openBlock(), _createBlock(_component_select2, {
          key: 1,
          data: _ctx.options,
          value: _ctx.value,
          disabled: _ctx.isReadOnly,
          onUpdate: _cache[4] || (_cache[4] = $event => (_ctx.updateSelection($event)))
        }, null, 8 /* PROPS */, ["data", "value", "disabled"]))
      : _createCommentVNode("v-if", true),
    (_ctx.useSelectComponent)
      ? (_openBlock(), _createElementBlock("select", {
          key: 2,
          class: _normalizeClass(_ctx.theme.select),
          value: _ctx.value,
          disabled: _ctx.isReadOnly,
          onChange: _cache[5] || (_cache[5] = $event => (_ctx.updateSelection(+$event.target.value)))
        }, [
          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.options, (option) => {
            return (_openBlock(), _createElementBlock("option", {
              key: option.value,
              value: option.value
            }, _toDisplayString(option.label), 9 /* TEXT, PROPS */, ["value"]))
          }), 128 /* KEYED_FRAGMENT */))
        ], 42 /* CLASS, PROPS, HYDRATE_EVENTS */, ["value", "disabled"]))
      : _createCommentVNode("v-if", true),
    (_ctx.useRadioBoxComponent)
      ? (_openBlock(), _createElementBlock("div", { key: 3 }, [
          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.options, (option) => {
            return (_openBlock(), _createElementBlock("span", {
              key: option.value,
              class: _normalizeClass(_ctx.theme.radiobox)
            }, [
              _createElementVNode("label", null, [
                _createElementVNode("input", {
                  type: "radio",
                  onChange: $event => (_ctx.updateSelection(option.value)),
                  checked: _ctx.value === option.value,
                  disabled: _ctx.isReadOnly
                }, null, 40 /* PROPS, HYDRATE_EVENTS */, ["onChange", "checked", "disabled"]),
                _createTextVNode(" " + _toDisplayString(option.label), 1 /* TEXT */)
              ])
            ], 2 /* CLASS */))
          }), 128 /* KEYED_FRAGMENT */))
        ]))
      : _createCommentVNode("v-if", true),
    _createVNode(_component_description, {
      theme: _ctx.theme,
      message: _ctx.schema.description
    }, null, 8 /* PROPS */, ["theme", "message"]),
    _createVNode(_component_description, {
      theme: _ctx.theme,
      message: _ctx.errorMessage
    }, null, 8 /* PROPS */, ["theme", "message"])
  ], 2 /* CLASS */))
}
export function objectEditorTemplateHtml(_ctx, _cache) {
  const _component_optional = _resolveComponent("optional")
  const _component_icon = _resolveComponent("icon")
  const _component_description = _resolveComponent("description")
  const _component_editor = _resolveComponent("editor")

  return (_openBlock(), _createElementBlock("div", {
    class: _normalizeClass(_ctx.className)
  }, [
    _createElementVNode("h3", null, [
      _createTextVNode(_toDisplayString(_ctx.titleToShow) + " ", 1 /* TEXT */),
      _createElementVNode("div", {
        class: _normalizeClass(_ctx.theme.buttonGroup),
        style: _normalizeStyle(_ctx.buttonGroupStyle)
      }, [
        _createVNode(_component_optional, {
          required: _ctx.required,
          value: _ctx.value,
          isReadOnly: _ctx.isReadOnly,
          theme: _ctx.theme,
          locale: _ctx.locale,
          onToggleOptional: _cache[0] || (_cache[0] = $event => (_ctx.toggleOptional()))
        }, null, 8 /* PROPS */, ["required", "value", "isReadOnly", "theme", "locale"]),
        (!_ctx.disableCollapse)
          ? (_openBlock(), _createBlock(_component_icon, {
              key: 0,
              onClick: _cache[1] || (_cache[1] = $event => (_ctx.collapseOrExpand())),
              text: _ctx.collapsed ? _ctx.icon.expand : _ctx.icon.collapse,
              theme: _ctx.theme,
              icon: _ctx.icon
            }, null, 8 /* PROPS */, ["text", "theme", "icon"]))
          : _createCommentVNode("v-if", true),
        (_ctx.hasDeleteButtonFunction)
          ? (_openBlock(), _createBlock(_component_icon, {
              key: 1,
              onClick: _cache[2] || (_cache[2] = $event => (_ctx.$emit('delete'))),
              text: _ctx.icon.delete,
              theme: _ctx.theme,
              icon: _ctx.icon
            }, null, 8 /* PROPS */, ["text", "theme", "icon"]))
          : _createCommentVNode("v-if", true)
      ], 6 /* CLASS, STYLE */)
    ]),
    _createVNode(_component_description, {
      theme: _ctx.theme,
      message: _ctx.schema.description
    }, null, 8 /* PROPS */, ["theme", "message"]),
    (!_ctx.collapsed && _ctx.value !== undefined)
      ? (_openBlock(), _createElementBlock("div", {
          key: 0,
          class: _normalizeClass(_ctx.theme.card)
        }, [
          (_ctx.showFilter)
            ? (_openBlock(), _createElementBlock("div", {
                key: 0,
                class: _normalizeClass(_ctx.theme.row)
              }, [
                _createElementVNode("input", {
                  class: _normalizeClass(_ctx.theme.input),
                  onChange: _cache[3] || (_cache[3] = $event => (_ctx.onFilterChange($event))),
                  onKeyup: _cache[4] || (_cache[4] = $event => (_ctx.onFilterChange($event))),
                  placeholder: _ctx.locale.info.search,
                  value: _ctx.filter
                }, null, 42 /* CLASS, PROPS, HYDRATE_EVENTS */, ["placeholder", "value"])
              ], 2 /* CLASS */))
            : _createCommentVNode("v-if", true),
          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.filteredProperties, (p, i) => {
            return (_openBlock(), _createElementBlock(_Fragment, null, [
              (_ctx.isRequired(p.property) !== false)
                ? (_openBlock(), _createBlock(_component_editor, {
                    key: p.property + _ctx.isRequired(p.property),
                    schema: p.schema,
                    title: p.schema.title || p.propertyName,
                    getReference: _ctx.getReference,
                    "initial-value": _ctx.value[p.propertyName],
                    onUpdateValue: $event => (_ctx.onChange(p.propertyName, $event)),
                    theme: _ctx.theme,
                    icon: _ctx.icon,
                    locale: _ctx.locale,
                    required: _ctx.isRequired(p.property),
                    readonly: _ctx.isReadOnly,
                    dragula: _ctx.dragula,
                    md: _ctx.md,
                    hljs: _ctx.hljs,
                    "force-https": _ctx.forceHttps,
                    "disable-collapse": _ctx.disableCollapse,
                    minItemCountIfNeedFilter: _ctx.minItemCountIfNeedFilter,
                    "no-select2": _ctx.noSelect2,
                    "monaco-editor": _ctx.monacoEditor
                  }, null, 8 /* PROPS */, ["schema", "title", "getReference", "initial-value", "onUpdateValue", "theme", "icon", "locale", "required", "readonly", "dragula", "md", "hljs", "force-https", "disable-collapse", "minItemCountIfNeedFilter", "no-select2", "monaco-editor"]))
                : _createCommentVNode("v-if", true)
            ], 64 /* STABLE_FRAGMENT */))
          }), 256 /* UNKEYED_FRAGMENT */))
        ], 2 /* CLASS */))
      : _createCommentVNode("v-if", true),
    _createVNode(_component_description, {
      theme: _ctx.theme,
      message: _ctx.errorMessage
    }, null, 8 /* PROPS */, ["theme", "message"])
  ], 2 /* CLASS */))
}
export function optionalTemplateHtml(_ctx, _cache) {
  return (_ctx.hasOptionalCheckbox)
    ? (_openBlock(), _createElementBlock("div", {
        key: 0,
        class: _normalizeClass(_ctx.theme.checkbox)
      }, [
        _createElementVNode("label", null, [
          _createElementVNode("input", {
            type: "checkbox",
            onChange: _cache[0] || (_cache[0] = $event => (_ctx.$emit('toggleOptional'))),
            checked: _ctx.value === undefined,
            disabled: _ctx.isReadOnly
          }, null, 40 /* PROPS, HYDRATE_EVENTS */, ["checked", "disabled"]),
          _createTextVNode(" " + _toDisplayString(_ctx.locale.info.notExists), 1 /* TEXT */)
        ])
      ], 2 /* CLASS */))
    : _createCommentVNode("v-if", true)
}
export function stringEditorTemplateHtml(_ctx, _cache) {
  const _component_optional = _resolveComponent("optional")
  const _component_icon = _resolveComponent("icon")
  const _component_file_uploader = _resolveComponent("file-uploader")
  const _component_select2 = _resolveComponent("select2")
  const _component_markdown_tip = _resolveComponent("markdown-tip")
  const _component_description = _resolveComponent("description")

  return (_openBlock(), _createElementBlock("div", {
    class: _normalizeClass(_ctx.className)
  }, [
    _createElementVNode("label", {
      class: _normalizeClass(_ctx.theme.title)
    }, [
      _createTextVNode(_toDisplayString(_ctx.titleToShow) + " ", 1 /* TEXT */),
      _createElementVNode("div", {
        class: _normalizeClass(_ctx.theme.buttonGroup),
        style: _normalizeStyle(_ctx.buttonGroupStyle)
      }, [
        _createVNode(_component_optional, {
          required: _ctx.required,
          value: _ctx.value,
          isReadOnly: _ctx.isReadOnly,
          theme: _ctx.theme,
          locale: _ctx.locale,
          onToggleOptional: _cache[0] || (_cache[0] = $event => (_ctx.toggleOptional()))
        }, null, 8 /* PROPS */, ["required", "value", "isReadOnly", "theme", "locale"]),
        (_ctx.hasDeleteButtonFunction)
          ? (_openBlock(), _createBlock(_component_icon, {
              key: 0,
              onClick: _cache[1] || (_cache[1] = $event => (_ctx.$emit('delete'))),
              text: _ctx.icon.delete,
              theme: _ctx.theme,
              icon: _ctx.icon
            }, null, 8 /* PROPS */, ["text", "theme", "icon"]))
          : _createCommentVNode("v-if", true),
        (_ctx.canPreview)
          ? (_openBlock(), _createBlock(_component_icon, {
              key: 1,
              onClick: _cache[2] || (_cache[2] = $event => (_ctx.collapseOrExpand())),
              text: _ctx.collapsed ? _ctx.icon.expand : _ctx.icon.collapse,
              theme: _ctx.theme,
              icon: _ctx.icon
            }, null, 8 /* PROPS */, ["text", "theme", "icon"]))
          : _createCommentVNode("v-if", true)
      ], 6 /* CLASS, STYLE */)
    ], 2 /* CLASS */),
    (_ctx.canUpload)
      ? (_openBlock(), _createBlock(_component_file_uploader, {
          key: 0,
          locale: _ctx.locale.fileUploaderLocale,
          onFileGot: _cache[3] || (_cache[3] = $event => (_ctx.fileGot($event)))
        }, null, 8 /* PROPS */, ["locale"]))
      : _createCommentVNode("v-if", true),
    (_ctx.useTextArea && _ctx.monacoEditor && _ctx.schema.format === 'json')
      ? (_openBlock(), _createElementBlock("div", {
          key: 1,
          ref: "monacoEditor",
          style: _normalizeStyle({ height: '400px', width: '90%', display: _ctx.collapsed ? 'none' : undefined })
        }, null, 4 /* STYLE */))
      : _createCommentVNode("v-if", true),
    (_ctx.useTextArea && (!_ctx.monacoEditor || _ctx.schema.format !== 'json'))
      ? (_openBlock(), _createElementBlock("textarea", {
          key: 2,
          class: _normalizeClass(_ctx.errorMessage ? _ctx.theme.errorTextarea : _ctx.theme.textarea),
          onChange: _cache[4] || (_cache[4] = $event => (_ctx.onChange($event))),
          onKeyup: _cache[5] || (_cache[5] = $event => (_ctx.onChange($event))),
          rows: "10",
          readOnly: _ctx.isReadOnly,
          disabled: _ctx.isReadOnly
        }, _toDisplayString(_ctx.value), 43 /* TEXT, CLASS, PROPS, HYDRATE_EVENTS */, ["readOnly", "disabled"]))
      : _createCommentVNode("v-if", true),
    (_ctx.useInput)
      ? (_openBlock(), _createElementBlock("input", {
          key: 3,
          class: _normalizeClass(_ctx.errorMessage ? _ctx.theme.errorInput : _ctx.theme.input),
          type: _ctx.schema.format,
          step: _ctx.schema.step || 1,
          onChange: _cache[6] || (_cache[6] = $event => (_ctx.onChange($event))),
          onKeyup: _cache[7] || (_cache[7] = $event => (_ctx.onChange($event))),
          value: _ctx.value,
          readOnly: _ctx.isReadOnly,
          disabled: _ctx.isReadOnly
        }, null, 42 /* CLASS, PROPS, HYDRATE_EVENTS */, ["type", "step", "value", "readOnly", "disabled"]))
      : _createCommentVNode("v-if", true),
    (_ctx.useSelect2Component)
      ? (_openBlock(), _createBlock(_component_select2, {
          key: 4,
          data: _ctx.options,
          value: _ctx.value,
          disabled: _ctx.isReadOnly,
          onUpdate: _cache[8] || (_cache[8] = $event => (_ctx.updateSelection($event)))
        }, null, 8 /* PROPS */, ["data", "value", "disabled"]))
      : _createCommentVNode("v-if", true),
    (_ctx.useSelectComponent)
      ? (_openBlock(), _createElementBlock("select", {
          key: 5,
          class: _normalizeClass(_ctx.theme.select),
          value: _ctx.value,
          disabled: _ctx.isReadOnly,
          onChange: _cache[9] || (_cache[9] = $event => (_ctx.updateSelection($event.target.value)))
        }, [
          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.options, (option) => {
            return (_openBlock(), _createElementBlock("option", {
              key: option.value,
              value: option.value
            }, _toDisplayString(option.label), 9 /* TEXT, PROPS */, ["value"]))
          }), 128 /* KEYED_FRAGMENT */))
        ], 42 /* CLASS, PROPS, HYDRATE_EVENTS */, ["value", "disabled"]))
      : _createCommentVNode("v-if", true),
    (_ctx.useRadioBoxComponent)
      ? (_openBlock(), _createElementBlock("div", { key: 6 }, [
          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.options, (option) => {
            return (_openBlock(), _createElementBlock("span", {
              key: option.value,
              class: _normalizeClass(_ctx.theme.radiobox)
            }, [
              _createElementVNode("label", null, [
                _createElementVNode("input", {
                  type: "radio",
                  onChange: $event => (_ctx.updateSelection(option.value)),
                  checked: _ctx.value === option.value,
                  disabled: _ctx.isReadOnly
                }, null, 40 /* PROPS, HYDRATE_EVENTS */, ["onChange", "checked", "disabled"]),
                _createTextVNode(" " + _toDisplayString(option.label), 1 /* TEXT */)
              ])
            ], 2 /* CLASS */))
          }), 128 /* KEYED_FRAGMENT */))
        ]))
      : _createCommentVNode("v-if", true),
    (_ctx.willPreviewImage)
      ? (_openBlock(), _createElementBlock("img", {
          key: 7,
          style: _normalizeStyle(_ctx.imagePreviewStyle),
          src: _ctx.getImageUrl
        }, null, 12 /* STYLE, PROPS */, ["src"]))
      : _createCommentVNode("v-if", true),
    (_ctx.useTextArea && !_ctx.collapsed && _ctx.willPreviewMarkdown)
      ? (_openBlock(), _createBlock(_component_markdown_tip, {
          key: 8,
          locale: _ctx.locale.markdownTipLocale
        }, null, 8 /* PROPS */, ["locale"]))
      : _createCommentVNode("v-if", true),
    (_ctx.willPreviewMarkdown)
      ? (_openBlock(), _createElementBlock("div", {
          key: 9,
          innerHTML: _ctx.getMarkdown
        }, null, 8 /* PROPS */, ["innerHTML"]))
      : _createCommentVNode("v-if", true),
    (_ctx.willPreviewCode)
      ? (_openBlock(), _createElementBlock("pre", { key: 10 }, [
          _createElementVNode("code", { innerHTML: _ctx.getCode }, null, 8 /* PROPS */, ["innerHTML"])
        ]))
      : _createCommentVNode("v-if", true),
    _createVNode(_component_description, {
      theme: _ctx.theme,
      message: _ctx.schema.description
    }, null, 8 /* PROPS */, ["theme", "message"]),
    _createVNode(_component_description, {
      theme: _ctx.theme,
      message: _ctx.errorMessage
    }, null, 8 /* PROPS */, ["theme", "message"])
  ], 2 /* CLASS */))
}
/* eslint-enable */
// tslint:enable
